# This is a basic workflow to help you get started with Actions

name: US1

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy:"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Build Docker image and save to tar
        run: |
          docker build -t mealplan:staging .
          docker save mealplan:staging -o mealplan.tar

      - name: Copy image + compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          source: |
            mealplan.tar
            docker-compose.yaml
          target: "~/deploy"

      - name: Deploy with docker compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -e
            cd ~/deploy
            echo "Lade Image ins lokale Docker-Registry..."
            docker load -i mealplan.tar
            echo "Stoppe alte Container falls vorhanden..."
            docker compose down || true
            echo "Starte neue Container..."
            docker compose up -d --force-recreate
            echo "Deployment abgeschlossen"
            rm mealplan.tar

      - name: Fetch container logs for review
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd ~/deploy
            echo "Container-Logs der letzten 50 Zeilen:"
            docker compose logs --tail=50
